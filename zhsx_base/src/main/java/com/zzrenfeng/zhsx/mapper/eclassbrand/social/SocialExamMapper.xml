<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzrenfeng.zhsx.mapper.eclassbrand.social.SocialExamMapper">

	<resultMap id="BaseResultMap" type="com.zzrenfeng.zhsx.model.eclassbrand.social.SocialExam">
		<result column="id" property="id" />
		<result column="classroom_id" property="classroomId" />
		<result column="classroom_name" property="classroomName" />
		<result column="exam_name" property="examName" />
		<result column="subject_name" property="subjectName" />
		<result column="time_day" property="timeDay" />
		<result column="exam_room_num" property="examRoomNum" />
		<result column="exam_date" property="examDate" />
		<result column="start_time" property="startTime" />
		<result column="end_time" property="endTime" />
		<result column="teacher_name" property="teacherName" />
		<result column="create_date" property="createDate" />
		<result column="modiy_date" property="modiyDate" />
		<result column="bak" property="bak" />
		<result column="bak1" property="bak1" />
		<result column="bak2" property="bak2" />
		<result column="template_type" property="templateType" />
	</resultMap>

	<sql id="Base_Column_List">
		id,classroom_id,classroom_name,exam_name,subject_name,time_day,exam_room_num,exam_date,start_time,end_time,teacher_name,create_date,modiy_date,bak,bak1,bak2,template_type
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from social_exam
		where id = #{id}
	</select>

	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from social_exam
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from social_exam
		where id = #{id}
	</delete>

	<delete id="deleteByClassroomId" parameterType="java.lang.String">
		delete from social_exam
		where classroom_id = #{classroomId}
	</delete>


	<insert id="insert" parameterType="SocialExam">
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">select uuid()</selectKey>
		insert into social_exam
		(id,classroom_id,classroom_name,exam_name,subject_name,time_day,exam_room_num,exam_date,start_time,end_time,teacher_name,create_date,modiy_date,bak,bak1,bak2,template_type)
		values
		(#{id},#{classroomId},#{classroomName},#{examName},#{subjectName},#{timeDay},#{examRoomNum},#{examDate},#{startTime},#{endTime},#{teacherName},#{createDate},#{modiyDate},#{bak},#{bak1},#{bak2},#{templateType})
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		insert into social_exam
		(id,classroom_id,classroom_name,exam_name,subject_name,time_day,exam_room_num,exam_date,start_time,end_time,teacher_name,create_date,modiy_date,bak,bak1,bak2,template_type)
		values
		<foreach collection="list" item="socialExam" separator=",">
			((select
			uuid()),#{socialExam.classroomId},#{socialExam.classroomName},#{socialExam.examName},#{socialExam.subjectName},#{socialExam.timeDay},#{socialExam.examRoomNum},#{socialExam.examDate},#{socialExam.startTime},#{socialExam.endTime},#{socialExam.teacherName},#{socialExam.createDate},#{socialExam.modiyDate},#{socialExam.bak},#{socialExam.bak1},#{socialExam.bak2},#{socialExam.templateType})
		</foreach>
	</insert>



	<update id="updateByPrimaryKeySelective" parameterType="SocialExam">
		update social_exam
		<set>
			<if test="id != null">
				id = #{id},
			</if>
			<if test="classroomId != null">
				classroom_id = #{classroomId},
			</if>
			<if test="classroomName != null">
				classroom_name = #{classroomName},
			</if>
			<if test="examName != null">
				exam_name = #{examName},
			</if>
			<if test="subjectName != null">
				subject_name = #{subjectName},
			</if>
			<if test="timeDay != null">
				time_day = #{timeDay},
			</if>
			<if test="examRoomNum != null">
				exam_room_num = #{examRoomNum},
			</if>
			<if test="examDate != null">
				exam_date = #{examDate},
			</if>
			<if test="startTime != null">
				start_time = #{startTime},
			</if>
			<if test="endTime != null">
				end_time = #{endTime},
			</if>
			<if test="teacherName != null">
				teacher_name = #{teacherName},
			</if>
			<if test="createDate != null">
				create_date = #{createDate},
			</if>
			<if test="modiyDate != null">
				modiy_date = #{modiyDate},
			</if>
			<if test="bak != null">
				bak = #{bak},
			</if>
			<if test="bak1 != null">
				bak1 = #{bak1},
			</if>
			<if test="bak2 != null">
				bak2 = #{bak2},
			</if>
			<if test="templateType != null">
				template_type = #{templateType}
			</if>
		</set>
		where id = #{id}
	</update>


	<update id="updateByPrimaryKey" parameterType="SocialExam">
		update social_exam
		set
		id = #{id},
		classroom_id = #{classroomId},
		classroom_name = #{classroomName},
		exam_name = #{examName},
		subject_name = #{subjectName},
		time_day =
		#{timeDay},
		exam_room_num = #{examRoomNum},
		exam_date = #{examDate},
		start_time =
		#{startTime},
		end_time = #{endTime},
		teacher_name = #{teacherName},
		create_date = #{createDate},
		modiy_date = #{modiyDate},
		bak = #{bak},
		bak1 = #{bak1},
		bak2 = #{bak2},
		template_type = #{templateType}
		where id = #{id}
	</update>
	
	<update id="updateClassroomName" parameterType="SocialExam">
		update social_exam
		set
			classroom_name = #{classroomName}
		where 
			classroom_id = #{classroomId}
	</update>
	

	<sql id="Dynamic_Conditions">
		<where>
			1=1
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="classroomId != null">
				and classroom_id = #{classroomId}
			</if>
			<if test="classroomName != null">
				and classroom_name = #{classroomName}
			</if>
			<if test="examName != null">
				and exam_name = #{examName}
			</if>
			<if test="subjectName != null">
				and subject_name = #{subjectName}
			</if>
			<if test="timeDay != null">
				and time_day = #{timeDay}
			</if>
			<if test="examRoomNum != null">
				and exam_room_num = #{examRoomNum}
			</if>
			<if test="examDate != null">
				and exam_date = #{examDate}
			</if>
			<if test="startTime != null">
				and start_time = #{startTime}
			</if>
			<if test="endTime != null">
				and end_time = #{endTime}
			</if>
			<if test="teacherName != null">
				and teacher_name = #{teacherName}
			</if>
			<if test="createDate != null">
				and create_date = #{createDate}
			</if>
			<if test="modiyDate != null">
				and modiy_date = #{modiyDate}
			</if>
			<if test="bak != null">
				and bak = #{bak}
			</if>
			<if test="bak1 != null">
				and bak1 = #{bak1}
			</if>
			<if test="bak2 != null">
				and bak2 = #{bak2}
			</if>
			<if test="templateType != null">
				and template_type = #{templateType}
			</if>
			<if test="currTime != null">
				and date_format(#{currTime},'%T') between DATE_FORMAT(DATE_SUB(start_time,INTERVAL 2 HOUR),'%T') and end_time
			</if>
			<if test="search != null">
				<bind name="pattern" value="'%' + search + '%'" />
				and (exam_name like #{pattern} or subject_name like #{pattern})
			</if>
		</where>
	</sql>


	<select id="findSelective" parameterType="SocialExam" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from social_exam
		<include refid="Dynamic_Conditions" />
	</select>


	<select id="findPageSelective" parameterType="SocialExam" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from social_exam
		<include refid="Dynamic_Conditions" />
	</select>


	<select id="getSocialExam" parameterType="java.lang.String" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from social_exam
		where classroom_id = #{classroomId} and exam_date = curdate() and end_time > curtime()
		order by start_time
		limit 1
	</select>


	<select id="getCountByDateTimeAndClassroomId" parameterType="SocialExam" resultType="java.lang.Integer">
		SELECT SUM(a.c + b.d) FROM
		( SELECT COUNT(*) AS c FROM
		social_exam
		WHERE classroom_id = #{classroomId}
		AND exam_date = #{examDate}
		AND (DATE_FORMAT(#{startTime},'%T') BETWEEN DATE_FORMAT(start_time,'%T')
		AND end_time)
		) AS a,
		( SELECT COUNT(*) AS d FROM
		social_exam
		WHERE
		classroom_id = #{classroomId}
		AND exam_date = #{examDate}
		AND
		(DATE_FORMAT(#{endTime},'%T') BETWEEN DATE_FORMAT(start_time,'%T') AND end_time)
		) AS b
	</select>



</mapper>