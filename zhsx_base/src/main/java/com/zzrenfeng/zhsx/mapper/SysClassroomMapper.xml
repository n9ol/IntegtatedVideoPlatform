<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzrenfeng.zhsx.mapper.SysClassroomMapper" >
 
	<resultMap id="BaseResultMap"  type="com.zzrenfeng.zhsx.model.SysClassroom" >
		<result column="id" property="id" />
		<result column="classCode" property="classCode" />
		<result column="className" property="className" />
		<result column="schoolId" property="schoolId" />
		<result column="serviceIp" property="serviceIp" />
		<result column="webPort" property="webPort" />
		<result column="roomId" property="roomId" />
		<result column="uid" property="uid" />
		<result column="clientIp" property="clientIp" />
		<result column="bak" property="bak" />
		<result column="bak1" property="bak1" />
		<result column="bak2" property="bak2" />
	</resultMap>

	<sql id="Base_Column_List">
		id,classCode,className,schoolId,serviceIp,webPort,roomId,uid,clientIp,bak,bak1,bak2
	</sql>


	<insert id="insert" parameterType="SysClassroom" >
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">select uuid()</selectKey>
		insert into sys_classroom (id,classCode,className,schoolId,serviceIp,webPort,roomId,uid,clientIp,bak,bak1,bak2)
		values (#{id},#{classCode},#{className},#{schoolId},#{serviceIp},#{webPort},#{roomId},#{uid},#{clientIp},#{bak},#{bak1},#{bak2})
	</insert>
	
	<insert id="insertBatch" parameterType="java.util.List" >
		insert into sys_classroom (id,classCode,className,schoolId,serviceIp,webPort,roomId,uid,clientIp,bak,bak1,bak2)
		values 
		<foreach collection="list" item="classNames" separator=",">
			(
				(select uuid()),#{classNames.classCode},#{classNames.className},#{classNames.schoolId},#{classNames.serviceIp},#{classNames.webPort},#{classNames.roomId},#{classNames.uid},#{classNames.clientIp},#{classNames.bak},#{classNames.bak1},#{classNames.bak2}
			)
		</foreach>
	</insert>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
		delete from lo_fschedule where classid = #{id};
		delete from lo_fschedule where zId in (select id from lo_schedule where classid = #{id});
		delete from lo_schedule  where classid = #{id};
		delete from sys_classroom where id = #{id}
	</delete>
	
	<delete id="delbatchClassRoom" parameterType="java.util.List">
		delete from lo_fschedule where classid IN <foreach collection="list" open="(" close=")" item="id" separator=",">#{id}</foreach>;
		delete from lo_schedule  where classid IN <foreach collection="list" open="(" close=")" item="id" separator=",">#{id}</foreach>;
		delete from sys_classroom where id IN <foreach collection="list" open="(" close=")" item="id" separator=",">#{id}</foreach>
	</delete>


	<update id="updateByPrimaryKeySelective" parameterType="SysClassroom" >
		update sys_classroom
		<set>
			<if test="id != null" >
				id = #{id},
			</if>
			<if test="classCode != null" >
				classCode = #{classCode},
			</if>
			<if test="className != null" >
				className = #{className},
			</if>
			<if test="schoolId != null" >
				schoolId = #{schoolId},
			</if>
			<if test="webPort != null" >
				webPort = #{webPort},
			</if>
			<if test="roomId != null" >
				roomId = #{roomId},
			</if>
			<if test="uid != null" >
				uid = #{uid},
			</if>
			<if test="serviceIp != null" >
				serviceIp = #{serviceIp},
			</if>
			<if test="bak != null" >
				bak = #{bak},
			</if>
			<if test="bak1 != null" >
				bak1 = #{bak1},
			</if>
			<if test="bak2 != null" >
				bak2 = #{bak2},
			</if>
			clientIp = #{clientIp}
		</set>
		where id = #{id}
	</update>
	

	<update id="updateByPrimaryKey" parameterType="SysClassroom" >
		update sys_classroom
		set 
		id = #{id},
		classCode = #{classCode},
		className = #{className},
		schoolId = #{schoolId},
		serviceIp = #{serviceIp},
		webPort = #{webPort},
		roomId = #{roomId},
		uid = #{uid},
		clientIp = #{clientIp},
		bak = #{bak},
		bak1 = #{bak1},
		bak2 = #{bak2}
		where id = #{id}
	</update>
	
	<update id="batchUpdateState" parameterType="java.util.HashMap">
		update sys_classroom
		set
		<if test="bak != null" >
			 bak = #{bak}
		</if> 
		where 
			id in <foreach collection="ids" open="(" close=")" item="id" separator=",">#{id}</foreach>
	</update>
	
	
	<update id="updateOnlineState" parameterType="SysClassroom">
		UPDATE sys_classroom SET bak1 = #{bak1} WHERE classCode = #{classCode} and substring_index(serviceIp, ':', 1) = #{serviceIp}
	</update>	
	
	
	<sql id="Dynamic_Conditions">
		<where>
			1=1
			<if test="id != null" >
				and id = #{id}
			</if>
			<if test="classCode != null" >
				and classCode = #{classCode}
			</if>
			<if test="className != null" >
				and className = #{className}
			</if>
			<if test="schoolId != null" >
				and schoolId = #{schoolId}
			</if>
			<if test="serviceIp != null" >
				and serviceIp = #{serviceIp}
			</if>
			<if test="webPort != null" >
				and webPort = #{webPort}
			</if>
			<if test="roomId != null" >
				and roomId = #{roomId}
			</if>
			<if test="uid != null" >
				and uid = #{uid}
			</if>
			<if test="clientIp != null" >
				and clientIp = #{clientIp}
			</if>
			<if test="bak != null" >
				and bak = #{bak}
			</if>
			<if test="bak1 != null" >
				and bak1 = #{bak1}
			</if>
			<if test="bak2 != null" >
				and bak2 = #{bak2}
			</if>
			<if test="search!=null">
				and (classCode like '%${search}%' or className like '%${search}%' or (schoolId in (select id from sys_school where schoolName like '%${search}%' )))
			</if>
			<if test="authority != null">
				<if test="schoolIds != null">
					and schoolId in <foreach collection="schoolIds" open="(" close=")" item="schoolid" separator=",">#{schoolid}</foreach>							
				</if>
				<if test="schoolIds == null">
					and schoolId in (null)
				</if>
			</if>
		</where>
		ORDER BY schoolId DESC,bak DESC,id DESC
	</sql>
	
	
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
		select 
		<include refid="Base_Column_List" />
		from sys_classroom
		where id = #{id}
	</select>
	
	<select id="findSelective" parameterType="SysClassroom" resultType="SysClassroom">
		select 
		<include refid="Base_Column_List" />,
		(SELECT schoolName FROM sys_school s WHERE s.id=c.schoolId) as schoolName
		from sys_classroom c
		<include refid="Dynamic_Conditions"/>
	</select>


	<select id="findPageSelective" parameterType="SysClassroom" resultType="SysClassroom">
		select 
		<include refid="Base_Column_List" />,
		(SELECT schoolName FROM sys_school s WHERE s.id=c.schoolId) as schoolName
		from sys_classroom c
		<include refid="Dynamic_Conditions"/>
	</select>

	
	<select id="findAllNameAndCode" parameterType="java.lang.String" resultType="java.util.Map">
		select classCode,className from sys_classroom where schoolId = #{schoolId}
	</select>
	
	
	
	<select id="findClassroomNameAndClassroomId" parameterType="SysClassroom" resultType="SysClassroom">
		select id,className 
		from sys_classroom
		<include refid="Dynamic_Conditions"/>
	</select>
		
</mapper>